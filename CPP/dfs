// DFS algorithm in C++

#include <iostream>
#include <list>
using namespace std;

class Graph {
    private:
    int numVertices;
    list<int> *adjLists;
    bool *visited;

    public:
    Graph(int V);
    void addEdge(int src, int dest);
    void DFS(int vertex);
    void clearVisited(int vertices);
};

// Initialize graph
Graph::Graph(int vertices) {
    numVertices = vertices;
    adjLists = new list<int>[vertices];
    visited = new bool[vertices];
}

//Function to clear the visited array
void Graph::clearVisited(int vertices) {
    for(int i=0; i<vertices; i++)
        visited[i]=false;
}

// Add edges
void Graph::addEdge(int src, int dest) {
    adjLists[src].push_front(dest);
}

// DFS algorithm
void Graph::DFS(int vertex) {

    //Marking the current vertex as visited
    visited[vertex] = true;

    //getting its adjacent vertices in a list
    list<int> adjList = adjLists[vertex];

    //printing out the current vertex
    cout << vertex << " ";

    //Iterating over the list containing the adjacent vertices and calling DFS on them (Recursion)
    list<int>::iterator i;
    for (i = adjList.begin(); i != adjList.end(); ++i)
    {
        if (!visited[*i])
            DFS(*i);
    }
}


//Driver function
int main() {
    Graph g(4);
  
    g.clearVisited(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 3);

    g.DFS(2);

    return 0;
}